/*
 *  Filename	: ExploitInfo.cpp
 *  Author		: Kuba Sejdak
 *  Created on	: 09-05-2012
 */

#include "ExploitInfo.h"

#include <list>
#include <string>
#include <QDate>
#include <QMultiMap>
#include <QList>

#include <core/Options.h>
#include <utils/DateRegExp.h>

using namespace std;

ExploitInfo::ExploitInfo()
{
	m_id = -1;
    m_name = "";
    m_extractedFrom = "";
    m_graphName = "";
	m_captureDate = QDate(1999, 12, 31);
	m_size = 0;
    m_fileType = "unknown";
	m_fileSize = 0;
    m_codeOffset = -1;
	m_traits = TraitMapHandle(new TraitMap());
}

int ExploitInfo::id()
{
	return m_id;
}

string ExploitInfo::name()
{
    return m_name;
}

string ExploitInfo::extractedFrom()
{
    return m_extractedFrom;
}

string ExploitInfo::graphName()
{
    return m_graphName;
}

int ExploitInfo::size()
{
	return m_size;
}

string ExploitInfo::fileType()
{
    return m_fileType;
}

int ExploitInfo::fileSize()
{
	return m_fileSize;
}

int ExploitInfo::codeOffset()
{
    return m_codeOffset;
}

bool ExploitInfo::isExploitPresent()
{
	return (m_codeOffset >= 0);
}

TraitMapHandle ExploitInfo::traits()
{
    return m_traits;
}

bool ExploitInfo::isBroken()
{
	if(Options::instance()->skipBrokenSamples && m_size <= Options::instance()->brokenSampleSize)
		return true;
	else
		return false;
}

bool ExploitInfo::isValuable()
{
	if(Options::instance()->skipNoSyscallAndLoopSamples == true) {
		bool syscallFound = false;
		bool loopFound = false;

		TraitMap::iterator syscallIt = m_traits->find("api");
		if(syscallIt != m_traits->end())
			syscallFound = true;

		TraitMap::iterator loopIt = m_traits->find("loop");
		if(loopIt != m_traits->end())
			loopFound = true;

		if(syscallFound && loopFound)
			return true;
		else
			return false;
	}
	else
		return true;
}

QDate ExploitInfo::captureDate()
{
	return m_captureDate;
}

void ExploitInfo::setId(int id)
{
	m_id = id;
}

void ExploitInfo::setName(string name)
{
    m_name = name;
}

void ExploitInfo::setExtractedFrom(string name)
{
    m_extractedFrom = name;

	DateRegExp rx;
	m_captureDate = rx.findDate(m_extractedFrom);
}

void ExploitInfo::setGraphName(string name)
{
    m_graphName = name;
}

void ExploitInfo::setCaptureDate(std::string date)
{
	m_captureDate = QDate::fromString(date.c_str(), "yyyyMMdd");
}

void ExploitInfo::setSize(int size)
{
	m_size = size;
}

void ExploitInfo::setFileType(string fileType)
{
    m_fileType = fileType;
}

void ExploitInfo::setFileSize(int fileSize)
{
	m_fileSize = fileSize;
}

void ExploitInfo::setCodeOffset(int codeOffset)
{
    m_codeOffset = codeOffset;
}

void ExploitInfo::setTrait(string name, TraitEntryHandle value)
{
	// ensure that key/value is unique
	if(m_traits->contains(name, value))
		return;

    m_traits->insert(name, value);
}
