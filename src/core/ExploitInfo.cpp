/*
 *  Filename	: ExploitInfo.cpp
 *  Author		: Kuba Sejdak
 *  Created on	: 09-05-2012
 */

#include "ExploitInfo.h"

#include <QMultiMap>
#include <QMap>
#include <QList>
#include <QDate>
#include <QString>
#include <QtSql>

#include <core/Options.h>
#include <utils/DateRegExp.h>

ExploitInfo::ExploitInfo()
{
    m_name = "";
    m_extractedFrom = "";
    m_graphName = "";
	m_captureDate = QDate(1999, 12, 31);
	m_size = 0;
    m_fileType = "unknown";
	m_fileSize = 0;
    m_codeOffset = -1;
	m_traits = new TraitsMap();
	m_querys = new QList<QSqlQuery>();
}

ExploitInfo::~ExploitInfo()
{
	TraitsMap::iterator it_map;
    for(it_map = m_traits->begin(); it_map != m_traits->end(); ++it_map)
        delete it_map.value();

    m_traits->clear();
    delete m_traits;

    m_querys->clear();
    delete m_querys;
}

QString ExploitInfo::name()
{
    return m_name;
}

QString ExploitInfo::extractedFrom()
{
    return m_extractedFrom;
}

QString ExploitInfo::graphName()
{
    return m_graphName;
}

int ExploitInfo::size()
{
	return m_size;
}

QString ExploitInfo::fileType()
{
    return m_fileType;
}

int ExploitInfo::fileSize()
{
	return m_fileSize;
}

int32_t ExploitInfo::codeOffset()
{
    return m_codeOffset;
}

bool ExploitInfo::isExploitPresent()
{
	return (m_codeOffset >= 0);
}

TraitsMap *ExploitInfo::traits()
{
    return m_traits;
}

QList<QSqlQuery> *ExploitInfo::querys()
{
    return m_querys;
}

bool ExploitInfo::isBroken()
{
	if(Options::instance()->skipBrokenSamples && m_size <= Options::instance()->brokenSampleSize)
		return true;
	else
		return false;
}

QDate ExploitInfo::captureDate()
{
	return m_captureDate;
}

void ExploitInfo::setName(QString name)
{
    m_name = name;
}

void ExploitInfo::setExtractedFrom(QString name)
{
    m_extractedFrom = name;

	DateRegExp rx;
	m_captureDate = rx.findDate(m_extractedFrom);
}

void ExploitInfo::setGraphName(QString name)
{
    m_graphName = name;
}

void ExploitInfo::setSize(int size)
{
	m_size = size;
}

void ExploitInfo::setFileType(QString fileType)
{
    m_fileType = fileType;
}

void ExploitInfo::setFileSize(int fileSize)
{
	m_fileSize = fileSize;
}

void ExploitInfo::setCodeOffset(int codeOffset)
{
    m_codeOffset = codeOffset;
}

void ExploitInfo::setTrait(QString name, TraitsEntry *value)
{
	/* ensure that key/value is unique */
    if(m_traits->contains(name, value))
        return;

    m_traits->insert(name, value);
}

void ExploitInfo::setQuery(QSqlQuery q)
{
    m_querys->push_back(q);
}
